// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BatteryState: Int {
  case charging = 0
  case discharging = 1
  case full = 2
  case unknown = 3
}

enum ThermalState: Int {
  /// nominal value
  case safe = 0
  /// device is getting warm, but not under throttling
  case fair = 1
  /// device is getting warm and performance is throttled
  case serious = 2
  /// performance is throttled, device is too hot
  case critical = 3
  /// unknown state
  case unknown = 4
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol EcoModeApi {
  func getPlatformInfo() throws -> String
  func getBatteryLevel() throws -> Double
  func getBatteryState() throws -> BatteryState
  func isBatteryInLowPowerMode() throws -> Bool
  func getThermalState() throws -> ThermalState
  func getProcessorCount() throws -> Int64
  func getTotalMemory() throws -> Int64
  func getFreeMemory() throws -> Int64
  func getTotalStorage() throws -> Int64
  func getFreeStorage() throws -> Int64
  func getEcoScore() throws -> Double?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class EcoModeApiSetup {
  /// The codec used by EcoModeApi.
  /// Sets up an instance of `EcoModeApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: EcoModeApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getPlatformInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getPlatformInfo\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getPlatformInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPlatformInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPlatformInfoChannel.setMessageHandler(nil)
    }
    let getBatteryLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getBatteryLevel\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getBatteryLevelChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getBatteryLevel()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBatteryLevelChannel.setMessageHandler(nil)
    }
    let getBatteryStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getBatteryState\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getBatteryStateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getBatteryState()
          reply(wrapResult(result.rawValue))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBatteryStateChannel.setMessageHandler(nil)
    }
    let isBatteryInLowPowerModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.isBatteryInLowPowerMode\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      isBatteryInLowPowerModeChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isBatteryInLowPowerMode()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isBatteryInLowPowerModeChannel.setMessageHandler(nil)
    }
    let getThermalStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getThermalState\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getThermalStateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getThermalState()
          reply(wrapResult(result.rawValue))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getThermalStateChannel.setMessageHandler(nil)
    }
    let getProcessorCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getProcessorCount\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getProcessorCountChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getProcessorCount()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getProcessorCountChannel.setMessageHandler(nil)
    }
    let getTotalMemoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getTotalMemory\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getTotalMemoryChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getTotalMemory()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getTotalMemoryChannel.setMessageHandler(nil)
    }
    let getFreeMemoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getFreeMemory\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getFreeMemoryChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getFreeMemory()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getFreeMemoryChannel.setMessageHandler(nil)
    }
    let getTotalStorageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getTotalStorage\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getTotalStorageChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getTotalStorage()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getTotalStorageChannel.setMessageHandler(nil)
    }
    let getFreeStorageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getFreeStorage\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getFreeStorageChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getFreeStorage()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getFreeStorageChannel.setMessageHandler(nil)
    }
    let getEcoScoreChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_eco_mode.EcoModeApi.getEcoScore\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getEcoScoreChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getEcoScore()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getEcoScoreChannel.setMessageHandler(nil)
    }
  }
}
