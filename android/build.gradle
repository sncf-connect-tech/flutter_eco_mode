group 'sncf.connect.tech.flutter_eco_mode'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'sncf.connect.tech.flutter_eco_mode'
    }

    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 19
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
    }

    tasks.withType(Test).configureEach {
        jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    }

    testOptions {

        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
